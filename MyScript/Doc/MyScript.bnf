(*
为了更加方便的定义bnf，引用自定义的bnf语法，反正要不需要那么的准确
1. $concat(',',a,b) := a ',' b | a | b 
3. $join(',' , a) := a (',' a)*
 
some choose：
1. 字符串字面值，无转义 \[...] \[[...]] \[[[...]]] \[=..[...]=..]
2. 单行注释 \\
3. 多行块注释 \\[...] \\[[...]] \\[[[...]]] \\[=..[...]=..]
 *)

module ::= stats

stats ::= {stat [';']}

block ::= '{' stats '}'

stat ::= block
      |  'if' exp block {('elseif' | 'else' 'if') exp block} ['else' block]
      |  'while' exp block 
      |  'do' block 'while' exp 
      |  'for' Name '=' exp ',' exp [',' exp] block 
      |  'for' Name [',' Name]* [','] 'in' exp block 
      |  'for' block 
      |  'break' 
      |  'continue' 
      |  'try' block ['catch' [Name] block] ['finally' block] 
      |  'throw' [explist] 
      |  scope_block
      |  scope_line
      |  'fn' funcname funcbody
      |  'return' [explist] 
      |  ('global'|'local') namelist ['=' explist] 
      |  ('global'|'local') 'fn' Name funcbody 
      |  varlist '=' explist 
      |  var self_assign exp
      |  funccall

# 这样设计可以简化解析代码
scope_block ::= 'using' [namelist] '=' explist block

scope_line ::= 'using' namelist '=' explist ';'

# 语法糖，支持一部分吧，先预留着
self_assign ::= '+=' | '-=' | '*=' | '/=' | '%=' | '//=' | '&=' | '|=' | '~=' | '^=' | '.='

# 单个name或者var时，可以在后面追加一个',' 用于说明需要解散 MyArray，其他情况，看赋值语句，前后数量多少
namelist ::= Name {',' Name} [',']

varlist ::= $join('*' var) [',']

var ::= Name [{index | args } index]

funccall ::= Name {index | args} args

funcname ::= Name {'.' Name}

funcbody ::= ['(' [paramlist [',']] ')'] block

# 参考Python的做法
param_item ::= Name ['=' exp]
paramlist ::= $concat( $join(param_item) , '*' [Name] , '**' Name, $join(param_item))

explist ::= $join(['*'] exp)

array_def ::= '[' [$join(exp) [',']] ']'

table_def ::= '{' [ $join(field) [',']] '}'

# 顺带兼容下json
field ::= '[' exp ']' '=' exp | (Name | String) ('='|':') exp

exp_or_stat ::= exp | 'throw' [explist] | 'break' | 'continue' | 'return' [explist]

exp ::= q_exp | exp binop exp | unop exp | main_exp

primary_exp ::= 'nil' | 'false' | 'true' | Number | String
    | fn funcbody | table_def | array_def
    | '(' exp ')'
    | Name

main_exp ::= primary_exp {index | args}

# q_exp ::= exp '?' exp ':' exp_or_stat | exp '?:' exp_or_stat | exp '??' exp_or_stat
# 方便编码，似乎没什么不妥
q_exp ::= exp '?' [exp] (':'|'?') exp_or_stat

function ::= 'fn' funcbody

index ::= '[' exp ']' | '.' Name | '.' String

args ::=  '(' [$concat($join(exp) , $join('*' exp) , $join('**' exp), $join(Name '=' exp)) [','] ] ')' | String

# 这儿是按优先级排序的，除了 ^ 其他都是左结合
binop ::= 'or'
    | 'and'
    | '<' | '<=' | '>' | '>=' | '==' | '!='
    | '<>'
    | '..'
    | '|' 
    | '~' 
    | '&' 
    | '<<' | '>>'
    | '+' | '-' 
    | '*' | '/' | '%' | '//'
    | '^'

unop ::= '-' | 'not' | '~' | '+'