comment: "SimpleScript Syntax: version 1.0"
fileTypes: [
  "ss"
]
firstLineMatch: "\\A#!.*?\\bsimplescript\\b"
name: "SimpleScript"
patterns: [
  {
    begin: "\\b((local\\b)\\s+)?(function)\\s*(\\s+[a-zA-Z_][a-zA-Z0-9_]*(\\.[a-zA-Z_][a-zA-Z0-9_]*)*(:[a-zA-Z_][a-zA-Z0-9_]*)?\\s*)?(\\()"
    beginCaptures:
      "1":
        name: "storage.modifier.local.ss"
      "3":
        name: "keyword.control.ss"
      "4":
        name: "entity.name.function.ss"
      "5":
        name: "punctuation.definition.parameters.begin.ss"
    end: "\\)"
    endCaptures:
      "0":
        name: "punctuation.definition.parameters.end.ss"
    name: "meta.function.ss"
    patterns: [
      {
        match: "[a-zA-Z_][a-zA-Z0-9_]*"
        name: "variable.parameter.function.ss"
      }
    ]
  }
  {
    match: "(?<![\\w\\d.])0[xX][0-9A-Fa-f]+(?![pPeE.0-9])"
    name: "constant.numeric.integer.hexadecimal.ss"
  }
  {
    match: "(?<![\\w\\d.])0[xX][0-9A-Fa-f]+(\\.[0-9A-Fa-f]+)?([eE]-?\\d*)?([pP][-+]\\d+)?"
    name: "constant.numeric.float.hexadecimal.ss"
  }
  {
    match: "(?<![\\w\\d.])\\d+(?![pPeE.0-9])"
    name: "constant.numeric.integer.ss"
  }
  {
    match: "(?<![\\w\\d.])\\d+(\\.\\d+)?([eE]-?\\d*)?"
    name: "constant.numeric.float.ss"
  }
  {
    begin: "'"
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.ss"
    end: "'"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.ss"
    name: "string.quoted.single.ss"
    patterns: [
      {
        include: "#escaped_char"
      }
    ]
  }
  {
    begin: "\""
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.ss"
    end: "\""
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.ss"
    name: "string.quoted.double.ss"
    patterns: [
      {
        include: "#escaped_char"
      }
    ]
  }
  {
    begin: "(?<=\\.cdef)\\s*(\\[(=*)\\[)"
    beginCaptures:
      "0":
        name: "string.quoted.other.multiline.ss"
      "1":
        name: "punctuation.definition.string.begin.ss"
    contentName: "meta.embedded.ss"
    end: "(\\]\\2\\])"
    endCaptures:
      "0":
        name: "string.quoted.other.multiline.ss"
      "1":
        name: "punctuation.definition.string.end.ss"
    patterns: [
      {
        include: "source.c"
      }
    ]
  }
  {
    begin: "(?<!//)\\[(=*)\\["
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.ss"
    end: "\\]\\1\\]"
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.ss"
    name: "string.quoted.other.multiline.ss"
  }
  {
    captures:
      "1":
        name: "punctuation.definition.comment.ss"
    match: "\\A(#!).*$\\n?"
    name: "comment.line.shebang.ss"
  }
  {
    begin: "(^[ \\t]+)?(?=//)"
    beginCaptures:
      "1":
        name: "punctuation.whitespace.comment.leading.ss"
    end: "(?!\\G)((?!^)[ \\t]+\\n)?"
    endCaptures:
      "1":
        name: "punctuation.whitespace.comment.trailing.ss"
    patterns: [
      {
        begin: "//\\[(=*)\\["
        beginCaptures:
          "0":
            name: "punctuation.definition.comment.begin.ss"
        end: "\\]\\1\\]"
        endCaptures:
          "0":
            name: "punctuation.definition.comment.end.ss"
        name: "comment.block.ss"
      }
      {
        begin: "//"
        beginCaptures:
          "0":
            name: "punctuation.definition.comment.ss"
        end: "\\n"
        name: "comment.line.double-dash.ss"
      }
    ]
  }
  {
    captures:
      "1":
        name: "keyword.control.goto.ss"
      "2":
        name: "constant.other.placeholder.ss"
    match: "\\b(goto)\\s+([a-zA-Z_][a-zA-Z0-9_]*)"
  }
  {
    captures:
      "1":
        name: "punctuation.definition.label.begin.ss"
      "2":
        name: "punctuation.definition.label.end.ss"
    match: "(::)[a-zA-Z_][a-zA-Z0-9_]*(::)"
    name: "constant.other.placeholder.ss"
  }
  {
    match: "\\b(break|do|else|for|if|elseif|goto|return|then|repeat|while|until|end|function|local|in)\\b"
    name: "keyword.control.ss"
  }
  {
    match: "(?<![^.]\\.|:)\\b(false|nil|true|_G|_VERSION|math\\.(pi|huge))\\b|(?<![.])\\.{3}(?!\\.)"
    name: "constant.language.ss"
  }
  {
    match: "(?<![^.]\\.|:)\\b(self)\\b"
    name: "variable.language.self.ss"
  }
  {
    match: "(?<![^.]\\.|:)\\b(assert|collectgarbage|dofile|error|getfenv|getmetatable|ipairs|loadfile|loadstring|module|next|pairs|pcall|print|rawequal|rawget|rawset|require|select|setfenv|setmetatable|tonumber|tostring|type|unpack|xpcall)\\b(?=\\s*(?:[({\"']|\\[\\[))"
    name: "support.function.ss"
  }
  {
    match: "(?<![^.]\\.|:)\\b(coroutine\\.(create|resume|running|status|wrap|yield)|string\\.(byte|char|dump|find|format|gmatch|gsub|len|lower|match|rep|reverse|sub|upper)|table\\.(concat|insert|maxn|remove|sort)|math\\.(abs|acos|asin|atan2?|ceil|cosh?|deg|exp|floor|fmod|frexp|ldexp|log|log10|max|min|modf|pow|rad|random|randomseed|sinh?|sqrt|tanh?)|io\\.(close|flush|input|lines|open|output|popen|read|tmpfile|type|write)|os\\.(clock|date|difftime|execute|exit|getenv|remove|rename|setlocale|time|tmpname)|package\\.(cpath|loaded|loadlib|path|preload|seeall)|debug\\.(debug|[gs]etfenv|[gs]ethook|getinfo|[gs]etlocal|[gs]etmetatable|getregistry|[gs]etupvalue|traceback))\\b(?=\\s*(?:[({\"']|\\[\\[))"
    name: "support.function.library.ss"
  }
  {
    match: "\\b(and|or|not)\\b"
    name: "keyword.operator.ss"
  }
  {
    match: "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*(?:[({\"']|\\[\\[))"
    name: "support.function.any-method.ss"
  }
  {
    match: "(?<=[^.]\\.|:)\\b([a-zA-Z_][a-zA-Z0-9_]*)"
    name: "variable.other.ss"
  }
  {
    match: "\\+|-|%|#|\\*|\\/|\\^|==?|~=|<=?|>=?|(?<!\\.)\\.{2}(?!\\.)"
    name: "keyword.operator.ss"
  }
]
repository:
  escaped_char:
    patterns: [
      {
        match: "\\\\[abfnrtvz\\\\\"'\\n]"
        name: "constant.character.escape.ss"
      }
      {
        match: "\\\\\\d{1,3}"
        name: "constant.character.escape.byte.ss"
      }
      {
        match: "\\\\x[0-9A-Fa-f][0-9A-Fa-f]"
        name: "constant.character.escape.byte.ss"
      }
      {
        match: "\\\\u\\{[0-9A-Fa-f]+\\}"
        name: "constant.character.escape.unicode.ss"
      }
      {
        match: "\\\\."
        name: "invalid.illegal.character.escape.ss"
      }
    ]
scopeName: "source.ss"
