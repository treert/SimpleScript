{
    "if": {
        "body": "if ${1:condition} then\n\t${0:// body}\nend",
        "description": "if",
        "prefix": "if"
    },
    "ifelse": {
        "body": "if ${1:condition} then\n\t${2:// body}\nelse\n\t${0:// body}\nend",
        "description": "ifelse",
        "prefix": "ifelse"
    },
    "elif": {
        "body": "else if ${1:condition} then\n\t${0:// body}",
        "description": "elif",
        "prefix": "elif"
    },
    "error": {
        "body": "error(${0:...})",
        "description": "throw error",
        "prefix": "error"
    },
    "for": {
        "body": "for ${1:i}=${2:1},${3:10} do\n\t${0:print(i)}\nend",
        "description": "for i=1,10",
        "prefix": "for"
    },
    "fori": {
        "body": "for ${1:i},${2:v} in ipairs(${3:table_name}) do\n\t${0:print(i,v)}\nend",
        "description": "for i,v in ipairs()",
        "prefix": "fori"
    },
    "fore": {
        "body": "foreach ${1:k},${2:v} in ${3:table_name} do\n\t${0:// print(k,v)}\nend",
        "description": "foreach k,v in table",
        "prefix": "fore"
    },
    "fun": {
        "body": "function ( ${1:...} )\n\t${0:// body}\nend",
        "description": "anonymous function",
        "prefix": "fun"
    },
    "func": {
        "body": "function ${1:function_name}( ${2:...} )\n\t${0:// body}\nend",
        "description": "function",
        "prefix": "func"
    },
    "local": {
        "body": "local ${1:x} = ${0:1}",
        "description": "local x = 1",
        "prefix": "local"
    },
    "print": {
        "body": "print(${1:...})",
        "description": "print(...)",
        "prefix": "print"
    },
    "require": {
        "body": "require(\"${1:module}\")",
        "description": "require()",
        "prefix": "require"
    },
    "return": {
        "body": "return ${0:...}",
        "description": "return ...",
        "prefix": "return"
    },
    "tonumber": {
        "body": "tonumber(${1:e}${2:, base})",
        "description": "tonumber (e [, base])",
        "prefix": "tonumber"
    },
    "tostring": {
        "body": "tostring(${1:v})",
        "description": "tostring (v)",
        "prefix": "tostring"
    },
    "type": {
        "body": "type(${1:v})",
        "description": "type(v)",
        "prefix": "type"
    },
    "unpack": {
        "body": "unpack(${1:...})",
        "description": "unpack (list [, i [, j]])",
        "prefix": "unpack"
    }
}